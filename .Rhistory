knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
return (data.frame(train_data[,idcol],train_data[,classcol],d))
}
#用knn来预测点属于的类别
#train_data  训练集matrix格式
#obse	     要预测对象
#type        计算距离采用的范数类型
#calcols     那些列参与计算距离
#classcol    类别标志类
#idcol       唯一标识每个训练对象的列
#k           k邻近里面的k值
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
return (freqs[1,])
}
knn_classi(iris,c(121,203),'2',c(2:3),4,1,5)
#计算距离函数。
#type = c("O", "I", "F", "M", "2")
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)
}
return (near_distance)
}
#计算与所有的训练集之间的距离关系
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
return (data.frame(train_data[,idcol],train_data[,classcol],d))
}
#用knn来预测点属于的类别
#train_data  训练集matrix格式
#obse	     要预测对象
#type        计算距离采用的范数类型
#calcols     那些列参与计算距离
#classcol    类别标志类
#idcol       唯一标识每个训练对象的列
#k           k邻近里面的k值
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
return (freqs[1,])
}
knn_classi(iris,c(121,203),'4',c(2:3),4,1,5)
#计算距离函数。
#type = c("O", "I", "F", "M", "2")
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)
}
return (near_distance)
}
#计算与所有的训练集之间的距离关系
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
return (data.frame(train_data[,idcol],train_data[,classcol],d))
}
#用knn来预测点属于的类别
#train_data  训练集matrix格式
#obse	     要预测对象
#type        计算距离采用的范数类型
#calcols     那些列参与计算距离
#classcol    类别标志类
#idcol       唯一标识每个训练对象的列
#k           k邻近里面的k值
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
return (freqs[1,])
}
knn_classi(iris,c(121,203),'1',c(2:3),4,1,5)
#计算距离函数。
#type = c("O", "I", "F", "M", "2")
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)
}
return (near_distance)
}
#计算与所有的训练集之间的距离关系
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
return (data.frame(train_data[,idcol],train_data[,classcol],d))
}
#用knn来预测点属于的类别
#train_data  训练集matrix格式
#obse	     要预测对象
#type        计算距离采用的范数类型
#calcols     那些列参与计算距离
#classcol    类别标志类
#idcol       唯一标识每个训练对象的列
#k           k邻近里面的k值
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
return (freqs[1,])
}
knn_classi(iris,c(121,203),'5',c(2:3),4,1,5)
#计算距离函数。
#type = c("O", "I", "F", "M", "2")
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)
}
return (near_distance)
}
#计算与所有的训练集之间的距离关系
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
return (data.frame(train_data[,idcol],train_data[,classcol],d))
}
#用knn来预测点属于的类别
#train_data  训练集matrix格式
#obse	     要预测对象
#type        计算距离采用的范数类型
#calcols     那些列参与计算距离
#classcol    类别标志类
#idcol       唯一标识每个训练对象的列
#k           k邻近里面的k值
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
return (freqs[1,])
}
knn_classi(iris,c(121,203),'2',c(2:3),4,1,5)
#计算距离函数。
#type = c("O", "I", "F", "M", "2")
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)
}
return (near_distance)
}
#计算与所有的训练集之间的距离关系
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
return (data.frame(train_data[,idcol],train_data[,classcol],d))
}
#用knn来预测点属于的类别
#train_data  训练集matrix格式
#obse	     要预测对象
#type        计算距离采用的范数类型
#calcols     那些列参与计算距离
#classcol    类别标志类
#idcol       唯一标识每个训练对象的列
#k           k邻近里面的k值
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
return (freqs[1,])
}
knn_classi(iris,c(11,22),'2',c(2:3),4,1,5)#c(121,203)
#计算距离函数。
#type = c("O", "I", "F", "M", "2")
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)
}
return (near_distance)
}
#计算与所有的训练集之间的距离关系
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
return (data.frame(train_data[,idcol],train_data[,classcol],d))
}
#用knn来预测点属于的类别
#train_data  训练集matrix格式
#obse	     要预测对象
#type        计算距离采用的范数类型
#calcols     那些列参与计算距离
#classcol    类别标志类
#idcol       唯一标识每个训练对象的列
#k           k邻近里面的k值
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
return (freqs[1,])
}
knn_classi(iris,c(11,22),'1',c(2:3),4,1,5)#c(121,203)
#计算距离函数。
#type = c("O", "I", "F", "M", "2")
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)
}
return (near_distance)
}
#计算与所有的训练集之间的距离关系
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
return (data.frame(train_data[,idcol],train_data[,classcol],d))
}
#用knn来预测点属于的类别
#train_data  训练集matrix格式
#obse	     要预测对象
#type        计算距离采用的范数类型
#calcols     那些列参与计算距离
#classcol    类别标志类
#idcol       唯一标识每个训练对象的列
#k           k邻近里面的k值
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
return (freqs[1,])
}
knn_classi(iris,c(11,22),'2',c(2:3),4,1,5)#c(121,203)
#' @return residual matrices \code{e1}
#' @examples
#' \dontrun{
#' data(data)
#' attach(data)
#' e1 <- function(M)
#' print(c(2*sum(e1)/(n*(n-1)))
#' }
#' @import DAAG
#' @export
library(DAAG)
#计算距离函数。
#type = c("O", "I", "F", "M", "2")
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)#zhao
}
return (near_distance)
}
#计算与所有的训练集之间的距离关系
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
m <- data.frame(train_data[,idcol],train_data[,classcol],d)
return(m)
}
#用knn来预测点属于的类别
#train_data  训练集matrix格式
#obse	     要预测对象
#type        计算距离采用的范数类型
#calcols     那些列参与计算距离
#classcol    类别标志类
#idcol       唯一标识每个训练对象的列
#k           k邻近里面的k值
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
return (freqs[1,])
}
knn_classi(iris,c(11,22),'2',c(2:3),4,1,5)#c(121,203)
devtools::document()
View(Cross_Validation2_1)
devtools::document()
devtools::check()
devtools::document()
devtools::document()
install.packages("RANN")
devtools::document()
install.packages("bootstrap")
install.packages("Ball")
devtools::document()
devtools::document()
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)#zhao
}
return (near_distance)
}
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
m <- data.frame(train_data[,idcol],train_data[,classcol],d)
return(m)
}
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
re <- freqs[1,]
re
}
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)#zhao
}
return (near_distance)
}
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
m <- data.frame(train_data[,idcol],train_data[,classcol],d)
return(m)
}
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
re <- freqs[1,]
re
}
knn_classi(iris,c(11,22),'2',c(2:3),4,1,5)#c(121,203)
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)#zhao
}
near_distance
}
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
m <- data.frame(train_data[,idcol],train_data[,classcol],d)
m
}
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
re <- freqs[1,]
re
}
knn_classi(iris,c(11,22),'2',c(2:3),4,1,5)#c(121,203)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
rm(list = c("knn_classi"))
devtools::document()
devtools::build_vignettes()
Type .Last.error.trace
.Last.error.trace
devtools::build()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::build()
install.packages('E:/Rcpp/StatComp-2020-12-16/StatComp20054_1.0.tar.gz',repo=NULL)
install.packages('E:/Rcpp/StatComp-2020-12-16/StatComp20054_1.0.tar.gz',repo=NULL)
devtools::document()
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::check()
devtools::build()
