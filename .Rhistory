knn_classi(iris,c(121,203),'2',c(2:3),4,1,5)
#计算距离函数。
#type = c("O", "I", "F", "M", "2")
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)
}
return (near_distance)
}
#计算与所有的训练集之间的距离关系
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
return (data.frame(train_data[,idcol],train_data[,classcol],d))
}
#用knn来预测点属于的类别
#train_data  训练集matrix格式
#obse	     要预测对象
#type        计算距离采用的范数类型
#calcols     那些列参与计算距离
#classcol    类别标志类
#idcol       唯一标识每个训练对象的列
#k           k邻近里面的k值
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
return (freqs[1,])
}
knn_classi(iris,c(11,22),'2',c(2:3),4,1,5)#c(121,203)
#计算距离函数。
#type = c("O", "I", "F", "M", "2")
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)
}
return (near_distance)
}
#计算与所有的训练集之间的距离关系
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
return (data.frame(train_data[,idcol],train_data[,classcol],d))
}
#用knn来预测点属于的类别
#train_data  训练集matrix格式
#obse	     要预测对象
#type        计算距离采用的范数类型
#calcols     那些列参与计算距离
#classcol    类别标志类
#idcol       唯一标识每个训练对象的列
#k           k邻近里面的k值
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
return (freqs[1,])
}
knn_classi(iris,c(11,22),'1',c(2:3),4,1,5)#c(121,203)
#计算距离函数。
#type = c("O", "I", "F", "M", "2")
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)
}
return (near_distance)
}
#计算与所有的训练集之间的距离关系
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
return (data.frame(train_data[,idcol],train_data[,classcol],d))
}
#用knn来预测点属于的类别
#train_data  训练集matrix格式
#obse	     要预测对象
#type        计算距离采用的范数类型
#calcols     那些列参与计算距离
#classcol    类别标志类
#idcol       唯一标识每个训练对象的列
#k           k邻近里面的k值
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
return (freqs[1,])
}
knn_classi(iris,c(11,22),'2',c(2:3),4,1,5)#c(121,203)
#' @return residual matrices \code{e1}
#' @examples
#' \dontrun{
#' data(data)
#' attach(data)
#' e1 <- function(M)
#' print(c(2*sum(e1)/(n*(n-1)))
#' }
#' @import DAAG
#' @export
library(DAAG)
#计算距离函数。
#type = c("O", "I", "F", "M", "2")
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)#zhao
}
return (near_distance)
}
#计算与所有的训练集之间的距离关系
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
m <- data.frame(train_data[,idcol],train_data[,classcol],d)
return(m)
}
#用knn来预测点属于的类别
#train_data  训练集matrix格式
#obse	     要预测对象
#type        计算距离采用的范数类型
#calcols     那些列参与计算距离
#classcol    类别标志类
#idcol       唯一标识每个训练对象的列
#k           k邻近里面的k值
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
return (freqs[1,])
}
knn_classi(iris,c(11,22),'2',c(2:3),4,1,5)#c(121,203)
devtools::document()
View(Cross_Validation2_1)
devtools::document()
devtools::check()
devtools::document()
devtools::document()
install.packages("RANN")
devtools::document()
install.packages("bootstrap")
install.packages("Ball")
devtools::document()
devtools::document()
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)#zhao
}
return (near_distance)
}
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
m <- data.frame(train_data[,idcol],train_data[,classcol],d)
return(m)
}
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
re <- freqs[1,]
re
}
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)#zhao
}
return (near_distance)
}
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
m <- data.frame(train_data[,idcol],train_data[,classcol],d)
return(m)
}
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
re <- freqs[1,]
re
}
knn_classi(iris,c(11,22),'2',c(2:3),4,1,5)#c(121,203)
knn_classi<-function(train_data,obse,type,calcols,classcol,idcol,k)
{
distance<-function(train_data,obse,type)
{
r<-nrow(train_data)
near_distance<-matrix(nrow=r,ncol=1)
for(i in 1:r){
near_distance[i]<-norm(cbind(train_data[i,]-obse),type)#zhao
}
near_distance
}
knn<-function(train_data,obse,type,calcols,classcol,idcol)
{
d<-distance(train_data[,calcols],obse,type)
m <- data.frame(train_data[,idcol],train_data[,classcol],d)
m
}
all_near<-knn(train_data,obse,type,calcols,classcol,idcol)
all_near<-all_near[order(all_near[,3]),]
r<-nrow(all_near)
cla<-unique(all_near[,2])
probs<-matrix(cla,ncol=2,nrow=length(cla),byrow=FALSE)
k_nearest<-all_near[1:k,]
freqs<-as.data.frame(table(k_nearest[,2]))
freqs[,2]<-freqs[,2]/k
#probs[,2]=probs[,2]/k
colnames(freqs)<-c("class","probs")
freqs<-freqs[order(freqs[,2],decreasing = TRUE),]
re <- freqs[1,]
re
}
knn_classi(iris,c(11,22),'2',c(2:3),4,1,5)#c(121,203)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
rm(list = c("knn_classi"))
devtools::document()
devtools::build_vignettes()
Type .Last.error.trace
.Last.error.trace
devtools::build()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::build()
install.packages('E:/Rcpp/StatComp-2020-12-16/StatComp20054_1.0.tar.gz',repo=NULL)
install.packages('E:/Rcpp/StatComp-2020-12-16/StatComp20054_1.0.tar.gz',repo=NULL)
devtools::document()
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
df1<-read.csv("df1.txt",stringsAsFactors = F)
df1<-read.csv("df1.txt",stringsAsFactors = F)
df2<-read.csv("output6.txt",header=F,sep=" ",stringsAsFactors = F)
blast_RIdeogram(df1,df2)
df1<-read.csv("df1.txt",stringsAsFactors = F)
df2<-read.csv("output6.txt",header=F,sep=" ",stringsAsFactors = F)
blast_RIdeogram(df1,df2)
df1<-read.csv("df1.txt",stringsAsFactors = F)
df2<-read.csv("output6.txt",header=F,sep=" ",stringsAsFactors = F)
blast_RIdeogram(df1,df2)
blast_RIdeogram <- function(df1,df2){
library(magrittr)
suppressPackageStartupMessages(library("dplyr"))
library("rsvg")
df3<-df2[,c(3,7,8,9,10)]
df3$fill<-ifelse(df3$V3>90,"0080cc",
ifelse(df3$V3<80,"0ab276","e64e60"))
df3$Species_1<-1
df3$Species_2<-1
df4 <- df3 %>%
select(Species_1,V7,V8,Species_2,V9,V10,fill)
colnames(df4)<-colnames(synteny_dual_comparison)
ideogram(karyotype =df1 ,
synteny=df4,output = "blast_RIdeogram.svg")
rsvg_pdf("blast_RIdeogram.svg","blast_RIdeogram.pdf")
}
df1<-read.csv("df1.txt",stringsAsFactors = F)
df2<-read.csv("output6.txt",header=F,sep=" ",stringsAsFactors = F)
blast_RIdeogram(df1,df2)
df1<-read.csv("df1.txt",stringsAsFactors = F)
df2<-read.csv("output6.txt",header=F,sep=" ",stringsAsFactors = F)
blast_RIdeogram(df1,df2)
df1<-read.csv("df1.txt",stringsAsFactors = F)
df2<-read.csv("output6.txt",header=F,sep=" ",stringsAsFactors = F)
blast_RIdeogram(df1,df2)
df1<-read.csv("df1.txt",stringsAsFactors = F)
df2<-read.csv("output6.txt",header=F,sep=" ",stringsAsFactors = F)
blast_RIdeogram(df1,df2)
blast_RIdeogram <- function(df1,df2){
library(RIdeogram)
data(karyotype_dual_comparison)
library(magrittr)
suppressPackageStartupMessages(library("dplyr"))
library("rsvg")
df3<-df2[,c(3,7,8,9,10)]
df3$fill<-ifelse(df3$V3>90,"0080cc",
ifelse(df3$V3<80,"0ab276","e64e60"))
df3$Species_1<-1
df3$Species_2<-1
df4 <- df3 %>%
select(Species_1,V7,V8,Species_2,V9,V10,fill)
colnames(df4)<-colnames(synteny_dual_comparison)
ideogram(karyotype =df1 ,
synteny=df4,output = "blast_RIdeogram.svg")
rsvg_pdf("blast_RIdeogram.svg","blast_RIdeogram.pdf")
}
df1<-read.csv("df1.txt",stringsAsFactors = F)
df2<-read.csv("output6.txt",header=F,sep=" ",stringsAsFactors = F)
blast_RIdeogram(df1,df2)
blast_circlize(df,df1)
blast_circlize(df,df1)
blast_circlize(df,df1)
blast_circlize <- function(df,df1){
suppressPackageStartupMessages(library(circlize))
library(RColorBrewer)
suppressPackageStartupMessages(library(ComplexHeatmap))
col<-RColorBrewer::brewer.pal(6,"Paired")
circos.par("start.degree" = 130)
circos.initialize(factors = df$chr,x=df$x)
circos.trackPlotRegion(factors = df$chr,y=df$y,
panel.fun = function(x,y){
circos.axis()
},track.height = 0.1)
highlight.sector(sector.index = "chloroplast",col=col[1])
highlight.sector(sector.index = "mitochondrial",col=col[2])
circos.text(x=70000,y=0.5,
labels = "chloroplast",
sector.index = "chloroplast")
circos.text(x=220000,y=0.5,
labels = "mitochondrial",
sector.index = "mitochondrial",
facing = "outside")
col_fun = colorRamp2(c(70,90,100),
c("green", "yellow", "red"))
for (i in 1:13){
x<-sort(c(df1[i,8],df1[i,7]))
y<-sort(c(df1[i,10],df1[i,9]))
z<-df1[i,3]
circos.link("chloroplast",x,"mitochondrial",y,
col=add_transparency(col_fun(z)))
}
circos.clear()
lgd_links = Legend(at = c(70, 80, 90, 100),
col_fun = col_fun,
title_position = "topleft",
title = "identity(%)")
lgd_list_vertical = packLegend(lgd_links)
draw(lgd_list_vertical, x = unit(10, "mm"),
y = unit(10, "mm"), just = c("left", "bottom"))
}
blast_circlize(df,df1)
blast_circlize(df,df3)
blast_circlize <- function(df,df1){
suppressPackageStartupMessages(library(circlize))
library(RColorBrewer)
suppressPackageStartupMessages(library(ComplexHeatmap))
col<-RColorBrewer::brewer.pal(6,"Paired")
circos.par("start.degree" = 130)
circos.initialize(factors = df$chr,x=df$x)
circos.trackPlotRegion(factors = df$chr,y=df$y,
panel.fun = function(x,y){
circos.axis()
},track.height = 0.1)
highlight.sector(sector.index = "chloroplast",col=col[1])
highlight.sector(sector.index = "mitochondrial",col=col[2])
circos.text(x=70000,y=0.5,
labels = "chloroplast",
sector.index = "chloroplast")
circos.text(x=220000,y=0.5,
labels = "mitochondrial",
sector.index = "mitochondrial",
facing = "outside")
col_fun = colorRamp2(c(70,90,100),
c("green", "yellow", "red"))
for (i in 1:13){
x<-sort(c(df1[i,8],df1[i,7]))
y<-sort(c(df1[i,10],df1[i,9]))
z<-df1[i,3]
circos.link("chloroplast",x,"mitochondrial",y,
col=add_transparency(col_fun(z)))
}
circos.clear()
lgd_links = Legend(at = c(70, 80, 90, 100),
col_fun = col_fun,
title_position = "topleft",
title = "identity(%)")
lgd_list_vertical = packLegend(lgd_links)
draw(lgd_list_vertical, x = unit(10, "mm"),
y = unit(10, "mm"), just = c("left", "bottom"))
}
blast_circlize(df,df3)
suppressPackageStartupMessages(library(circlize))#RIdeogram,magrittr,dplyr,rsvg,circlize,RColorBrewer,ComplexHeatmap
library(RColorBrewer)
suppressPackageStartupMessages(library(ComplexHeatmap))
df<-data.frame(chr=c(rep("chloroplast",2),rep("mitochondrial",2)),
x=c(1,131478,1,444567),
y=c(0,1,0,1))
df
df3<-read.csv("output6.txt",stringsAsFactors = F,header=F,sep=" ")
df3
blast_circlize <- function(df,df1){
col<-RColorBrewer::brewer.pal(6,"Paired")
circos.par("start.degree" = 130)
circos.initialize(factors = df$chr,x=df$x)
circos.trackPlotRegion(factors = df$chr,y=df$y,
panel.fun = function(x,y){
circos.axis()
},track.height = 0.1)
highlight.sector(sector.index = "chloroplast",col=col[1])
highlight.sector(sector.index = "mitochondrial",col=col[2])
circos.text(x=70000,y=0.5,
labels = "chloroplast",
sector.index = "chloroplast")
circos.text(x=220000,y=0.5,
labels = "mitochondrial",
sector.index = "mitochondrial",
facing = "outside")
col_fun = colorRamp2(c(70,90,100),
c("green", "yellow", "red"))
for (i in 1:13){
x<-sort(c(df1[i,8],df1[i,7]))
y<-sort(c(df1[i,10],df1[i,9]))
z<-df1[i,3]
circos.link("chloroplast",x,"mitochondrial",y,
col=add_transparency(col_fun(z)))
}
circos.clear()
lgd_links = Legend(at = c(70, 80, 90, 100),
col_fun = col_fun,
title_position = "topleft",
title = "identity(%)")
lgd_list_vertical = packLegend(lgd_links)
draw(lgd_list_vertical, x = unit(10, "mm"),
y = unit(10, "mm"), just = c("left", "bottom"))
}
blast_circlize(df,df1)
devtools::check()
devtools::build_vignettes()
devtools::check()
devtools::build()
